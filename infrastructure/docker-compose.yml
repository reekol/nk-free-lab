version: '3.8'

services:
  traefik:
    image: traefik:latest
    container_name: ${PREFIX}_traefik
    platform: linux/x86_64
    deploy:
      placement:
        constraints:
          - node.role == manager
          - node.labels.traefik.traefik_certificates == true
    command:
      --api
      --api.insecure=true
      --api.dashboard=true
      --providers.docker
      --entrypoints.http.address=:80
      --entrypoints.https.address=:443
      --log
      --accesslog
      --serverstransport.insecureskipverify=true
#      --certificatesresolvers.${PREFIX}_resolver.acme.tlschallenge=true
#      --certificatesresolvers.${PREFIX}_resolver.acme.email=${LETSENCRYPT_ACC_EMAIL}
#      --certificatesresolvers.${PREFIX}_resolver.acme.storage=/letsencrypt/acme.json
    ports:
      - target: 443
        published: 443
        mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DATA_DIR}/traefik/letsencrypt:/letsencrypt
    labels:
      - traefik.http.routers.traefik.tls.certresolver=${PREFIX}_resolver
      - traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)
      - traefik.http.routers.traefik.entrypoints=https
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.services.traefik.loadbalancer.passhostheader=true
      - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https,wss
    networks:
      infra_network:
        ipv4_address: 173.20.0.2
        aliases:
          - traefik.${DOMAIN}
          - cloud.traefik

  setupc:
    image: alpine:latest
    hostname: setupc.${DOMAIN}
    container_name: ${PREFIX}_setupc
    platform: linux/x86_64
    restart: "no"
    cap_add:
     - NET_ADMIN
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0
      - net.ipv6.conf.all.forwarding=1
      - net.ipv6.conf.default.forwarding=1
    depends_on:
      - "mariadb"
      - "cloud"
    command: >
        sh -c "apk add --update bash docker bind-tools iptables openssl openvpn openvpn-auth-ldap easy-rsa
        && /usr/share/easy-rsa/easyrsa --batch init-pki
        && /usr/share/easy-rsa/easyrsa --batch build-ca nopass
        && /usr/share/easy-rsa/easyrsa --batch build-server-full  vpn.${DOMAIN}   nopass
        && /usr/share/easy-rsa/easyrsa --batch build-client-full  ${MASTER_USER}  nopass
        && /usr/share/easy-rsa/easyrsa --batch build-client-full  ${DEMO_USER}    nopass
        && openssl dhparam -out /pki/dh.pem 2048
        && mkdir -p /dev/net
        && mknod /dev/net/tun c 10 200
        && MY_IP=\$(dig +short ${DOMAIN})
        && iptables -A INPUT   -i eth0 -m state --state NEW -p udp --dport 1194 -j ACCEPT
        && iptables -A INPUT   -i tun+ -j ACCEPT
        && iptables -A FORWARD -i tun+ -j ACCEPT
        && iptables -A FORWARD -i tun+ -o eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT
        && iptables -A FORWARD -i eth0 -o tun+ -m state --state RELATED,ESTABLISHED -j ACCEPT
        && iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o eth0 -j MASQUERADE
        && iptables -A OUTPUT -o tun+ -j ACCEPT
        && openvpn  --dh /pki/dh.pem --tls-server --dev tun0 --ca /pki/ca.crt --cert /pki/private/root.key --key /pki/private/ca.key
        && touch /entrypoint.log
        && docker container exec ${PREFIX}_cloud /bin/bash -c '\
            echo \"173.20.0.2      cloud.${DOMAIN}\" >> /etc/hosts
          '
          tail -F /entrypoint.log
        "
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      infra_network:
        ipv4_address: 173.20.0.3
        aliases:
          - setupc.${DOMAIN}

  portainer:
    image: docker.io/portainer/portainer-ce:latest
    hostname: portainer.${DOMAIN}
    container_name: ${PREFIX}_portainer
    platform: linux/x86_64
    command:
      --ssl
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DATA_DIR}/portainer/data:/data
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.tls.certresolver=${PREFIX}_resolver
      - traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN}`)
      - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https,wss
      - traefik.http.routers.portainer.entrypoints=https
      - traefik.http.routers.portainer.tls=true
      - traefik.http.services.portainer.loadbalancer.passhostheader=true
      - traefik.http.services.portainer.loadbalancer.server.scheme=https
      - traefik.http.services.portainer.loadbalancer.server.port=9443
    networks:
      infra_network:
        ipv4_address: 173.20.0.4
        aliases:
          - portainer.${DOMAIN}
  # sudo -u www-data php occ config:system:set --value 0 remember_login_cookie_lifetime
  cloud:
    image: docker.io/nextcloud:latest
    hostname: cloud.hostname.${DOMAIN}
    container_name: ${PREFIX}_cloud
    platform: linux/x86_64
    depends_on:
      - "redis"
      - "mariadb"
    volumes:
      - ${DATA_DIR}/cloud/var/www/html:/var/www/html
      - ${DATA_DIR}/cloud/var/www/html/custom_apps:/var/www/html/custom_apps
      - ${DATA_DIR}/cloud/var/www/html/config:/var/www/html/config
      - ${DATA_DIR}/cloud/var/www/html/data:/var/www/html/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.cloud.tls.certresolver=${PREFIX}_resolver
      - traefik.http.routers.cloud.rule=Host(`cloud.${DOMAIN}`)
      - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https,wss
      - traefik.http.routers.cloud.entrypoints=https
      - traefik.http.routers.cloud.tls=true
      - traefik.http.services.cloud.loadbalancer.server.port=80

      - traefik.http.middlewares.nc-header.headers.stsSeconds=31536000
      - traefik.http.middlewares.nc-header.headers.forceSTSHeader=true
      - traefik.http.middlewares.nc-header.headers.stsPreload=true
      - traefik.http.middlewares.nc-header.headers.stsIncludeSubdomains=true

      - traefik.http.middlewares.nc-dav.replacepathregex.regex=^/.well-known/ca(l|rd)dav
      - traefik.http.middlewares.nc-dav.replacepathregex.replacement=/remote.php/dav/

      - traefik.http.routers.cloud.middlewares=nc-dav,nc-header

    environment:
      - OVERWRITEPROTOCOL=https
      - REDIS_HOST=redis.${DOMAIN}
      - NEXTCLOUD_TRUSTED_DOMAINS=cloud.${DOMAIN}
      - NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USER}
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}
      - PHP_MEMORY_LIMIT=${NEXTCLOUD_PHP_MEMORY_LIMIT}
      - PHP_UPLOAD_LIMIT=${NEXTCLOUD_PHP_UPLOAD_LIMIT}

    networks:
      infra_network:
        ipv4_address: 173.20.0.5
        aliases:
          - cloud.alias.${DOMAIN}

  gitlab:
    # Deactivate session by userid 34
    # gitlab-redis-cli DEL "session:gitlab:2::$( gitlab-redis-cli --scan --pattern 'session:user:gitlab:34:*' | cut -d':' -f7 )"
    image: docker.io/gitlab/gitlab-ce:latest
    hostname: gitlab.${DOMAIN}
    container_name: ${PREFIX}_gitlab
    platform: linux/x86_64
    shm_size: 1GB
    depends_on:
      - "redis"
      - "mariadb"
      - "freeipaserver"
    volumes:
      - ${DATA_DIR}/gitlab/etc/gitlab:/etc/gitlab
      - ${DATA_DIR}/gitlab/var/log/gitlab:/var/log/gitlab
      - ${DATA_DIR}/gitlab/var/opt/gitlab:/var/opt/gitlab
    labels:
      - traefik.enable=true
      - traefik.http.routers.gitlab.tls.certresolver=${PREFIX}_resolver
      - traefik.http.routers.gitlab.rule=Host(`gitlab.${DOMAIN}`)
      - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https,wss
      - traefik.http.routers.gitlab.entrypoints=https
      - traefik.http.routers.gitlab.tls=true
      - traefik.http.services.gitlab.loadbalancer.server.scheme=http
      - traefik.http.services.gitlab.loadbalancer.server.port=80
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'https://gitlab.${DOMAIN}'
        nginx['listen_https'] = false
        nginx['listen_port'] = 80
        gitlab_rails['initial_root_password'] = "${GITLAB_ROOT_PASSWORD}"
        # Backup
        gitlab_rails['backup_archive_permissions'] = 0644 # See: https://docs.gitlab.com/ce/raketasks/backup_restore.html#backup-archive-permissions
        gitlab_rails['backup_keep_time'] = 1468800 # 17 days, we'll do a full backup every 5 days
        gitlab_rails['ldap_enabled'] = true
        gitlab_rails['prevent_ldap_sign_in'] = false

        # Disable the bundled Redis
        redis['enable'] = false

        # Redis via TCP
        gitlab_rails['redis_host'] = 'redis.${DOMAIN}'
        gitlab_rails['redis_port'] = 6379

        # Ldap
        # How TO connect ldap # https://computingforgeeks.com/how-to-configure-gitlab-freeipa-authentication/
        gitlab_rails['ldap_sync_worker_cron'] = "* * * * *" # Sync at every minute
        gitlab_rails['ldap_group_sync_worker'] = "* * * * *" # Sync at every minute

        gitlab_rails['ldap_servers'] = {
          'main' => {
            'label' => '${LDAP_GITLAB_SERVER_NAME}',
            'host' =>  'freeipaserver.${DOMAIN}',
            'port' => 636,
            'uid' => 'uid',
            'encryption' => 'simple_tls',
            'verify_certificates' => false,
            'bind_dn' => '${LDAP_GITLAB_BIND_USER}',
            'password' => '${LDAP_GITLAB_BIND_PASSWORD}',
            'tls_options' => {
              'ca_file' => '',
              'ssl_version' => '',
              'ciphers' => '',
              'cert' => '',
              'key' => ''
            },
            'timeout' => 10,
            'active_directory' => true,
            'allow_username_or_email_login' => true,
            'block_auto_created_users' => false,
            'base' => '${LDAP_GITLAB_BASE}',
            'user_filter' => '${LDAP_GITLAB_USER_FILTER}',
            'attributes' => {
              'username' => ['uid'],
              'email' => ['mail'],
              'name' => 'displayName',
              'first_name' => 'givenName',
              'last_name' => 'sn'
            },
          }
        }
    networks:
      infra_network:
        ipv4_address: 173.20.0.6
        aliases:
          - gitlab.${DOMAIN}

  grafana:
    image: docker.io/grafana/grafana-oss:latest
    hostname: grafana.${DOMAIN}
    container_name: ${PREFIX}_grafana
    platform: linux/x86_64
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.tls.certresolver=${PREFIX}_resolver
      - traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)
      - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https,wss
      - traefik.http.routers.grafana.entrypoints=https
      - traefik.http.routers.grafana.tls=true
      - traefik.http.services.grafana.loadbalancer.server.port=3000
    networks:
      infra_network:
        ipv4_address: 173.20.0.7
        aliases:
          - grafana.${DOMAIN}

  node-exporter:
    image: prom/node-exporter:latest
    hostname: nodeexporter.${DOMAIN}
    container_name: ${PREFIX}_node_exporter
    platform: linux/x86_64
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      --path.procfs=/host/proc
      --path.rootfs=/rootfs
      --path.sysfs=/host/sys
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    networks:
      infra_network:
        ipv4_address: 173.20.0.8
        aliases:
          - nodeexporter.${DOMAIN}

  prometheus:
    image: prom/prometheus:latest
    hostname: prometheus.${DOMAIN}
    container_name: ${PREFIX}_prometheus
    platform: linux/x86_64
    restart: unless-stopped
    volumes:
      - ${DATA_DIR}/prometheus/etc/prometheus:/etc/prometheus
      - ${DATA_DIR}/prometheus/prometheus:/prometheus
    command:
      --config.file=/etc/prometheus/prometheus.yml
      --storage.tsdb.path=/prometheus
      --web.console.libraries=/etc/prometheus/console_libraries
      --web.console.templates=/etc/prometheus/consoles
      --web.enable-lifecycle
    networks:
      infra_network:
        ipv4_address: 173.20.0.9
        aliases:
          - prometheus.${DOMAIN}

  redis:
    image: redis:latest
    hostname: redis.${DOMAIN}
    container_name: ${PREFIX}_redis
    platform: linux/x86_64
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
    volumes:
      - ${DATA_DIR}/redis/usr/local/etc/redis:/usr/local/etc/redis
    networks:
      infra_network:
        ipv4_address: 173.20.0.10
        aliases:
          - redis.${DOMAIN}

  redisinsight:
    image: redislabs/redisinsight:latest
    hostname: redisinsight.${DOMAIN}
    container_name: ${PREFIX}_redisinsight
    platform: linux/x86_64
    restart: unless-stopped
    depends_on:
      - "redis"
    environment:
      - RIPROXYENABLE=true
      - RITRUSTEDORIGINS=https://redisinsight.${DOMAIN}
    labels:
      - traefik.enable=true
      - traefik.http.routers.redisinsight.tls.certresolver=${PREFIX}_resolver
      - traefik.http.routers.redisinsight.rule=Host(`redisinsight.${DOMAIN}`)
      - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https,wss
      - traefik.http.routers.redisinsight.entrypoints=https
      - traefik.http.routers.redisinsight.tls=true
      - traefik.http.services.redisinsight.loadbalancer.server.port=8001

    networks:
      infra_network:
        ipv4_address: 173.20.0.11
        aliases:
          - redisinsight.${DOMAIN}

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: ${PREFIX}_cadvisor
    platform: linux/x86_64
    #ports:
      #- 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      infra_network:
        ipv4_address: 173.20.0.12
        aliases:
          - cadvisor.${DOMAIN}

  gotify:
    image: gotify/server
    container_name: ${PREFIX}_gotify
    hostname: gotify.${DOMAIN}
    platform: linux/x86_64
    labels:
      - traefik.enable=true
      - traefik.http.routers.gotify.tls.certresolver=${PREFIX}_resolver
      - traefik.http.routers.gotify.rule=Host(`gotify.${DOMAIN}`)
      - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https,wss
      - traefik.http.routers.gotify.entrypoints=https
      - traefik.http.routers.gotify.tls=true
      - traefik.http.services.gotify.loadbalancer.server.port=80
    networks:
      infra_network:
        ipv4_address: 173.20.0.13
        aliases:
          - gotify.${DOMAIN}

  mariadb:
    # Prepare backup
    # docker run --user mysql --rm -v ${DATA_DIR}/mariadb/backup:/backup mariadb:latest mariabackup --prepare --target-dir=/backup

    # Restore backup
    # docker run --user mysql --rm -v ${DATA_DIR}/mariadb/var/lib/mysql:/var/lib/mysql -v ${DATA_DIR}/mariadb/backup:/backup mariadb:latest mariabackup --copy-back --target-dir=/backup

    image: mariadb:latest
    restart: always
    hostname: mariadb.${DOMAIN}
    container_name: ${PREFIX}_mariadb
    platform: linux/x86_64
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "--silent","-p${MARIADB_ROOT_PASSWORD}"]
    environment:
      MARIADB_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    volumes:
      - ${DATA_DIR}/mariadb/var/lib/mysql:/var/lib/mysql
      - ${DATA_DIR}/mariadb/backup:/backup
      - ${DATA_DIR}/mariadb/etc/mysql/conf.d:/etc/mysql/conf.d
    networks:
      infra_network:
        ipv4_address: 173.20.0.14
        aliases:
          - mariadb.${DOMAIN}

  maxscale:
    image: mariadb/maxscale:latest
    restart: always
    hostname: maxscale.${DOMAIN}
    container_name: ${PREFIX}_maxscale
    platform: linux/x86_64
    labels:
      - traefik.enable=true
      - traefik.http.routers.maxscale.rule=Host(`maxscale.${DOMAIN}`)
      - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https,wss
      - traefik.http.routers.maxscale.entrypoints=https
      - traefik.http.routers.maxscale.tls=true
      - traefik.http.services.maxscale.loadbalancer.passhostheader=true
      - traefik.http.services.maxscale.loadbalancer.server.scheme=http
      - traefik.http.services.maxscale.loadbalancer.server.port=8989
    networks:
      infra_network:
        ipv4_address: 173.20.0.15
        aliases:
          - maxscale.${DOMAIN}

  freeipaserver: #kinit && ipa
    image: freeipa/freeipa-server:fedora-37
    restart: always
    hostname: freeipaserver.${DOMAIN}
    container_name: ${PREFIX}_freeipaserver
    platform: linux/x86_64
    privileged: true
    volumes:
#      - /sys/fs/cgroup:/sys/fs/cgroup:ro
      - ${DATA_DIR}/freeipaserver/data:/data:Z
    command:
      --no-ntp
    environment:
      - IPA_SERVER_HOSTNAME=freeipaserver.${DOMAIN}
      - IPA_SERVER_INSTALL_OPTS=-U -r ${DOMAIN}
      - PASSWORD=${FREEIPASERVER_ADMIN_PASSWORD} # at least 8 characters
      - VIRTUAL_PROTO=https
      - VIRTUAL_HOST=freeipaserver.${DOMAIN}
      - VIRTUAL_PORT=443
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0
    labels:
      - traefik.enable=true
      - traefik.http.routers.freeipaserver.tls.certresolver=${PREFIX}_resolver
      - traefik.http.routers.freeipaserver.rule=Host(`freeipaserver.${DOMAIN}`)
      - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https,wss
      - traefik.http.routers.freeipaserver.entrypoints=https
      - traefik.http.routers.freeipaserver.tls=true
      - traefik.http.services.freeipaserver.loadbalancer.passhostheader=true
      - traefik.http.services.freeipaserver.loadbalancer.server.scheme=https
      - traefik.http.services.freeipaserver.loadbalancer.server.port=443
    networks:
      infra_network:
        ipv4_address: 173.20.0.16
        aliases:
          - freeipaserver.${DOMAIN}

  whoami:
    image: traefik/whoami
    restart: always
    hostname: whoami.${DOMAIN}
    container_name: ${PREFIX}_whoami
    platform: linux/x86_64
    labels:
      - traefik.enable=true
      - traefik.http.routers.whoami.rule=Host(`whoami.${DOMAIN}`)
      - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https,wss
      - traefik.http.routers.whoami.entrypoints=https
      - traefik.http.routers.whoami.tls=true
      - traefik.http.services.whoami.loadbalancer.passhostheader=true
      - traefik.http.services.whoami.loadbalancer.server.scheme=http
      - traefik.http.services.whoami.loadbalancer.server.port=80
    networks:
      infra_network:
        ipv4_address: 173.20.0.17
        aliases:
          - whoami.${DOMAIN}

  project:
    build:
      context: "./resources/project"
    restart: always
    hostname: project.${DOMAIN}
    container_name: ${PREFIX}_project
    platform: linux/x86_64
    volumes:
      - ${DATA_DIR}/project/project:/project
    environment:
      - DOMAIN=${DOMAIN}
      - PROJECT_DB_HOST=${PROJECT_DB_HOST}
      - PROJECT_DB_DATABASE=${PROJECT_DB_DATABASE}
      - PROJECT_DB_USERNAME=${PROJECT_DB_USERNAME}
      - PROJECT_DB_PASSWORD=${PROJECT_DB_PASSWORD}
      - LDAP_APACHE_READ_AuthLDAPURL=${LDAP_APACHE_READ_AuthLDAPURL}
      - LDAP_APACHE_WRITE_AuthLDAPURL=${LDAP_APACHE_WRITE_AuthLDAPURL}
      - LDAP_APACHE_AuthLDAPBindDN=${LDAP_APACHE_AuthLDAPBindDN}
      - LDAP_APACHE_AuthLDAPBindPassword=${LDAP_APACHE_AuthLDAPBindPassword}
    labels:
      - traefik.enable=true
      - traefik.http.routers.project.rule=Host(`project.${DOMAIN}`,`api.${DOMAIN}`)
      - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https,wss
      - traefik.http.routers.project.entrypoints=https
      - traefik.http.routers.project.tls=true
      - traefik.http.services.project.loadbalancer.passhostheader=true
      - traefik.http.services.project.loadbalancer.server.scheme=http
      - traefik.http.services.project.loadbalancer.server.port=80
    networks:
      infra_network:
        ipv4_address: 173.20.0.18
        aliases:
          - project.${DOMAIN}

networks:
  infra_network:
    driver: bridge
    ipam:
      config:
        - subnet: 173.20.0.0/16
